kclusts <- tibble(k = 2:9) %>%
mutate(
kclust = map(k, ~ kmeans(sub_df_mod_cuan, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, sub_df_mod_cuan)
)
View(sub_df_mod_cuan)
# Desanidando los resultados: clusters
clusters <- kclusts %>%
unnest(cols = c(tidied)) %>%
select(-c(glanced, augmented, kclust))
# Desanidando los resultados: predicciones
predicciones <- kclusts %>%
unnest(cols = c(augmented)) %>%
select(k, abdomen, imc, glucemia, trigliceridemia, hdl, uricemia, .cluster)
# Desanidando los resultados: resumen
resumen <- kclusts %>%
unnest(cols = c(glanced)) %>%
select(-c(kclust, tidied, augmented))
ggplot(predicciones, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = clusters, size = 5, shape = "+") +
facet_wrap(~ k) +
theme_bw()
# Graficando las métricas a valores crecientes de K
ggplot(resumen, aes(x = k, y = tot.withinss)) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line () +
theme_bw()
df_procesada_adecuada <- df_procesada %>%
select(abdomen, imc, glucemia, trigliceridemia, hdl, uricemia)
best_k <- augment(sub_df_mod_cuan, df_procesada_adecuada)
augment(sub_df_mod_cuan, df_procesada_adecuada)
best_K <- augment(kclust, sub_df_mod_cuan)
kclust <- kmeans(sub_df_mod_cuan, centers = 3)
best_K <- augment(kclust, sub_df_mod_cuan)
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = clusters, size = 5, shape = "+")
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = tidy(kclust), size = 5, shape = "+")
kclust <- kmeans(sub_df_mod_cuan, centers = 2)
real_K <- augment(kclust, sub_df_mod_cuan)
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = tidy(kclust), size = 5, shape = "+")
kclust <- kmeans(sub_df_mod_cuan, centers = 2)
real_K <- augment(kclust, sub_df_mod_cuan)
ggplot(real_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = tidy(kclust), size = 5, shape = "+")
View(df)
View(sub_df_inmodificable)
View(sub_df_inmodificable)
View(sexo_ref)
View(sub_df_inmodificable)
View(df)
# Variables No-Modificables (Aquellas sobre las cuales los individuos no tienen influencia)
# (Sexo, Edad/Etáreo, Raza)
sub_df_inmodificable <- df_procesada %>%
select(index, sexo, edad, etareo, raza)
library(dplyr)
library(janitor)
library(tidyverse)
library(ggplot2)
library(tidymodels)
# Variables No-Modificables (Aquellas sobre las cuales los individuos no tienen influencia)
# (Sexo, Edad/Etáreo, Raza)
sub_df_inmodificable <- df_procesada %>%
select(index, sexo, edad, etareo, raza)
View(sub_df_inmodificable)
# Codificación de Variables Categóricas
sub_df_inmodificable_encoded <- model.matrix(~ index, sexo, edad, raza)
# Codificación de Variables Categóricas
sub_df_inmodificable_encoded <- model.matrix(~ index + sexo + edad + raza - 1, sub_df_inmodificable)
View(sub_df_inmodificable_encoded)
# Codificación de Variables Categóricas
sub_df_inmodificable_encoded <- model.matrix(~ index + sexo + edad + raza - 1, sub_df_inmodificable) %>%
as.data.frame()
View(sub_df_inmodificable_encoded)
View(sub_df_inmodificable_encoded)
View(sub_df_inmodificable)
View(sub_df_inmodificable)
# Codificación de Variables Categóricas
sub_df_inmodificable_encoded <- model.matrix(~ index + raza - 1, sub_df_inmodificable) %>%
as.data.frame()
View(sub_df_inmodificable_encoded)
# Codificación de Variables Categóricas: Raza
sub_df_inmodificable_encoded_razas <- model.matrix(~ index + raza - 1, sub_df_inmodificable) %>%
as.data.frame()
rm(sub_df_inmodificable_encoded)
View(raza_ref)
colnames(sub_df_inmodificable_encoded_razas) <- c("index", "caucasico", "asiatico", "africano", "mex-americano", "hispano", "otro")
View(sub_df_inmodificable_encoded_razas)
# Codificación de Variables Categóricas: Sexo
sub_df_inmodificable_encoded_sexos <- model.matrix(~ index + sexo - 1, sub_df_inmodificable) %>%
as.data.frame()
View(sub_df_inmodificable_encoded_sexos)
colnames(sub_df_inmodificable_encoded_sexos) <- c("index", "mujer", "hombre")
View(sub_df_inmodificable_encoded_sexos)
View(sub_df_inmodificable)
# Combinando las consultas tras la codificación
sub_df_inmodificable_encoded <- inner_join(sub_df_inmodificable_encoded_sexos, sub_df_inmodificable_encoded_razas, by = "index")
View(sub_df_inmodificable_encoded)
# Combinando las consultas tras la codificación
sub_df_inmodificable_encoded <- inner_join(sub_df_inmodificable_encoded_sexos, sub_df_inmodificable$edad, sub_df_inmodificable_encoded_razas, by = "index")
# Combinando las consultas tras la codificación
sub_df_inmodificable_encoded <- inner_join(sub_df_inmodificable_encoded_sexos, sub_df_inmodificable_encoded_razas, by = "index") %>%
sub_df_inmodificable %>% select(index, edad)
# Combinando las consultas tras la codificación
sub_df_inmodificable_encoded <- inner_join(sub_df_inmodificable_encoded_sexos, sub_df_inmodificable_encoded_razas, by = "index") %>%
(sub_df_inmodificable %>% select(index, edad))
# Combinando las consultas tras la codificación
sub_df_inmodificable_encoded <- inner_join(sub_df_inmodificable_encoded_sexos, sub_df_inmodificable_encoded_razas, by = "index") %>%
inner_join(sub_df_inmodificable %>% select(index, edad))
View(sub_df_inmodificable_encoded)
View(sub_df_inmodificable_encoded)
library(dplyr)
library(janitor)
library(tidyverse)
library(ggplot2)
library(tidymodels)
ggplot(df_procesada, aes(x = glucemia, y = trigliceridemia, colour = metabolico)) +
geom_point() +
labs(title = "Glucemia & Trigliceridemia", x = "Glucemia [mg/dL]", y = "Trigliceridemia [mg/dL]") +
scale_color_manual(values = c("0" = "darkcyan", "1" = "darkblue"), labels = c("Ausente", "Presente")) +
guides(color = guide_legend(title = "S. Metabolico"))
# Combinando las consultas de interés: No-Modificables + Modificables Continuas
df_mod_plus_continual <- inner_join(sub_df_inmodificable_encoded, sub_df_mod_cuan, by = "index")
# Combinando las consultas tras la codificación
sub_df_inmodificable_encoded <- inner_join(sub_df_inmodificable_encoded_sexos, sub_df_inmodificable_encoded_razas, by = "index") %>%
inner_join(sub_df_inmodificable %>% select(index, edad)) %>% as.data.frame()
# Variables Modificables (Cuantitativas) + Escalado de las variables
sub_df_mod_cuan <- df_procesada %>%
select(abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>%
scale() %>% as.data.frame()
# Combinando las consultas de interés: No-Modificables + Modificables Continuas
df_mod_plus_continual <- inner_join(sub_df_inmodificable_encoded, sub_df_mod_cuan, by = "index")
View(sub_df_mod_cual)
# Variables Modificables, Cualitativas
sub_df_mod_cual <- df_procesada %>%
select(index, central, peso, hiperglucemia, hipertrigliceridemia, dislipidemia, hiperuricemia)
# Combinando las consultas de interés: No-Modificables + Modificables Continuas
df_mod_plus_continual <- inner_join(sub_df_inmodificable_encoded, sub_df_mod_cuan, by = "index")
View(df_procesada)
View(sub_df_mod_cuan)
View(predicciones)
# Variables Modificables (Cuantitativas) + Escalado de las variables
sub_df_mod_cuan <- df_procesada %>%
select(index, abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>%
scale(abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>% as.data.frame()
# Variables Modificables (Cuantitativas) + Escalado de las variables
sub_df_mod_cuan <- df_procesada %>%
select(index, abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>%
scale(abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>% as.data.frame()
# Variables Modificables (Cuantitativas) + Escalado de las variables
sub_df_mod_cuan <- df_procesada %>%
select(index, abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>%
scale(c(abdomen, imc, glucemia, trigliceridemia, hdl, uricemia)) %>% as.data.frame()
# Variables Modificables (Cuantitativas) + Escalado de las variables
sub_df_mod_cuan <- df_procesada %>%
select(index, abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>%
scale(c("abdomen", imc, glucemia, trigliceridemia, hdl, uricemia)) %>% as.data.frame()
# Variables Modificables (Cuantitativas) + Escalado de las variables
sub_df_mod_cuan <- df_procesada %>%
select(index, abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>%
scale(c("abdomen", "imc", "glucemia", "trigliceridemia", "hdl", "uricemia")) %>% as.data.frame()
View(sub_df_mod_cual)
View(sub_df_mod_cuan)
sub_df_mod_cuan <- df_procesada %>%
select(abdomen, imc, glucemia, trigliceridemia, hdl, uricemia) %>%
scale() %>% as.data.frame()
View(sub_df_mod_cuan)
# Agregando la columna indice
row.names(sub_df_mod_cuan) <- paste0(1:nrow(sub_df_mod_cuan))
View(sub_df_mod_cuan)
# Agregando la columna indice
sub_df_mod_cuan$index <- seq(nrow(sub_df_mod_cuan))
View(sub_df_mod_cuan)
# Combinando las consultas de interés: No-Modificables + Modificables Continuas
df_mod_plus_continual <- inner_join(sub_df_inmodificable_encoded, sub_df_mod_cuan, by = "index")
View(df_mod_plus_continual)
View(sub_df_mod_cual)
# Combinando las consultas de interés: No-Modificables + Modificables Continuas
df_mod_plus_categorical <- inner_join(sub_df_inmodificable_encoded, sub_df_mod_cual, by = "index")
View(df_mod_plus_categorical)
View(df_mod_plus_categorical)
# Graficando las métricas a valores crecientes de K
ggplot(resumen, aes(x = k, y = tot.withinss)) +
ggplot(resumen, aes(x = k, y = tot.withinss)) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line () +
theme_bw()
# Graficando las métricas a valores crecientes de K
ggplot(resumen, aes(x = k, y = tot.withinss)) +
ggplot(resumen, aes(x = k, y = betweenss)) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line () +
theme_bw()
# Graficando la métrica BetweenSS a valores crecientes de K
ggplot(resumen, aes(x = k, y = betweenss)) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line () +
theme_bw()
# Graficando la métrica WithinSS a valores crecientes de K
ggplot(resumen, aes(x = k, y = tot.withinss)) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line () +
theme_bw()
kclust <- kmeans(sub_df_mod_cuan, centers = 3)
best_K <- augment(kclust, sub_df_mod_cuan)
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = tidy(kclust), size = 5, shape = "+")
# Graficando las posibilidades
ggplot(predicciones, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = clusters, size = 5, shape = "+") +
facet_wrap(~ k) +
theme_bw()
View(clusters)
View(clusters)
View(predicciones)
View(resumen)
View(clusters)
View(clusters)
View(kclust)
kclust[["cluster"]]
kclust[["centers"]]
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = kclusts[["centers"]], size = 5, shape = "+")
kclust[["centers"]]
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = kclusts, size = 5, shape = "+")
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = best_K, size = 5, shape = "+")
ggplot(best_K, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8)
metrics <- glance(kclust)
ggplot(predicciones, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = clusters, size = 5, shape = "+") +
facet_wrap(~ k) +
theme_bw()
# Iterando para encontrar el numero de clusteres ideal (métricas de error mínimas)
kclusts <- tibble(k = 2:9) %>%
mutate(
kclust = map(k, ~ kmeans(df_mod_plus_continual, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, df_mod_plus_continual)
)
View(df_mod_plus_continual)
kclusts <- tibble(k = 2:5) %>%
mutate(
kclust = map(k, ~ kmeans(df_mod_plus_continual, .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, df_mod_plus_continual)
)
# Desanidando los resultados: clusters
clusters <- kclusts %>%
unnest(cols = c(tidied)) %>%
select(-c(glanced, augmented, kclust))
# Desanidando los resultados: predicciones
predicciones <- kclusts %>%
unnest(cols = c(augmented)) %>%
select(k, abdomen, imc, glucemia, trigliceridemia, hdl, uricemia, .cluster)
# Desanidando los resultados: resumen
resumen <- kclusts %>%
unnest(cols = c(glanced)) %>%
select(-c(kclust, tidied, augmented))
# Graficando las posibilidades
ggplot(predicciones, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = clusters, size = 5, shape = "+") +
facet_wrap(~ k) +
theme_bw()
kclusts$glanced
kclusts$glanced[[1]]
kclusts$glanced[[1]]$tot.withinss
knitr::opts_chunk$set(echo = TRUE, fig.width = 14, fig.align = "center", fig.height = 7)
tablek(clusts$glanced)
table(clusts$glanced)
table(kclusts$glanced)
ggplot(predicciones, aes(x = glucemia, y = trigliceridemia)) +
geom_point(aes(color = .cluster), alpha = 0.8) +
geom_point(data = clusters, size = 5, shape = "+") +
facet_wrap(~ k) +
theme_bw()
kclusts$glanced %>% select(-totss)
for (k in kclusts$glanced) {
print(k)
}
for (k in 2:9) {
print(kclusts$glanced[[k]])
}
for (k in 2:4) {
print(kclusts$glanced[[k]])
}
for (k in 2:4) {
print(kclusts$glanced[[k]]$tot.withinss, kclusts$glanced[[k]]$betweenss)
}
for (k in 2:4) {
within_ss <- kclusts[[k]]$tot.withinss
between_ss <- kclusts[[k]]$betweenss
print(sprintf("Para k = %d, WithinSS = %.2f, BetweenSS = %.2f", k, within_ss, between_ss))
}
ggplot(resumen)) +
ggplot(resumen) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line (aes(x = k, y = tot.withinss) +
theme_bw()
ggplot() +
ggplot(data = resumen) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line(aes(x = k, y = tot.withinss) +
theme_bw()
ggplot(resumen, aes(x = k, y = tot.withinss) +
ggplot(resumen, aes(x = k, y = tot.withinss)) +
scale_x_discrete(name = "k", limits = c(2:9)) +
geom_point() +
geom_line () +
theme_bw()
knitr::opts_chunk$set(echo = TRUE, fig.width = 14, fig.align = "center", fig.height = 7)
# "Cortando" el árbol para facilitar su visualización
clusters <- cutree(hc, k = 2) # Dado que son 2 los grupos objetivo (positivo y negativo para SM)
```{r Aplicando el modelo de clusterizacion jerarquica}
# Generando una matriz de distancia
sub_df_mod_cuan_dist <- sub_df_mod_cuan %>% # Se crea la matriz de distancia sobre el df estandarizado
dist()
library(dplyr)
library(janitor)
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(factoextra)
library(cluster)
# Generando una matriz de distancia
sub_df_mod_cuan_dist <- sub_df_mod_cuan %>% # Se crea la matriz de distancia sobre el df estandarizado
dist()
# Logrando el modelo de clusterizacion jerárquica
hc <- hclust(sub_df_mod_cuan_dist, method = "complete") # El primer argumento es la matriz de distancia
# Visualización gráfica: dendograma
plot(hc)
rect.hclust(hc, k = 3, border = 3:5) # (modelo, clusters, colores)
# "Cortando" el árbol para facilitar su visualización
clusters <- cutree(hc, k = 2) # Dado que son 2 los grupos objetivo (positivo y negativo para SM)
cj_results <- table(clusters, df_procesada$metabolico) # Comparando los grupos resultantes: dendograma vs. datos originales
cj_results_df <- as.data.frame(cj_results)
View(cj_results_df)
cj_results_df$Freq[[1]]
cj_results_df$Freq[[1]]
table(clusters, df_procesada$metabolico)
# Generando una matriz de distancia
sub_df_mod_cuan_dist <- sub_df_mod_cuan %>% # Se crea la matriz de distancia sobre el df estandarizado
dist()
# Logrando el modelo de clusterizacion jerárquica
hc <- hclust(sub_df_mod_cuan_dist, method = "complete") # El primer argumento es la matriz de distancia
# Visualización gráfica: dendograma
plot(hc)
rect.hclust(hc, k = 3, border = 3:5) # (modelo, clusters, colores)
# "Cortando" el árbol para facilitar su visualización
clusters <- cutree(hc, k = 2) # Dado que son 2 los grupos objetivo (positivo y negativo para SM)
cj_results <- table(clusters, df_procesada$metabolico) # Comparando los grupos resultantes: dendograma vs. datos originales
# Visualización gráfica: dendograma
plot(hc)
rect.hclust(hc, k = 2, border = 3:4) # (modelo, clusters, colores)
# "Cortando" el árbol para facilitar su visualización
clusters <- cutree(hc, k = 2) # Dado que son 2 los grupos objetivo (positivo y negativo para SM)
cj_results <- table(clusters, df_procesada$metabolico) # Comparando los grupos resultantes: dendograma vs. datos originales
cj_results_df <- as.data.frame(cj_results)
cj_results_df$Freq[[1]]
table(clusters, df_procesada$metabolico)
# Generando una matriz de distancia
sub_df_mod_cuan_dist <- sub_df_mod_cuan %>% # Se crea la matriz de distancia sobre el df estandarizado
dist()
View(df_mod_plus_continual)
View(sub_df_mod_cuan)
knitr::opts_chunk$set(echo = TRUE, fig.width = 14, fig.align = "center", fig.height = 7)
pca_metabolic <- sub_df_mod_cuan %>% prcomp(., center = TRUE, scale = FALSE)
library(dplyr)
library(janitor)
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(factoextra)
library(cluster)
library(psych)
pca_metabolic <- sub_df_mod_cuan %>% prcomp(., center = TRUE, scale = FALSE)
pca_metabolic <- sub_df_mod_cuan %>% prcomp(., center = TRUE, scale = FALSE)
pca_metabolic
View(df_procesada)
pca_metabolic <- sub_df_mod_cuan %>%
select(-index) %>%
prcomp(., center = TRUE, scale = FALSE)
pca_metabolic
View(sub_df_mod_cuan)
View(sub_df_mod_cuan)
pca_metabolic <- sub_df_mod_cuan %>%
# select(-index) %>% # Quitando la columna indice
prcomp(., center = TRUE, scale = FALSE) # Evitando el escalado, ya que los datos ya lo están.
pca_metabolic <- sub_df_mod_cuan %>%
# select(-index) %>% # Quitando la columna indice
prcomp(., center = TRUE, scale = FALSE) # Evitando el escalado, ya que los datos ya lo están.
pca_metabolic
pca_metabolic <- sub_df_mod_cuan %>%
select(-index) %>% # Quitando la columna indice
prcomp(., center = TRUE, scale = FALSE) # Evitando el escalado, ya que los datos ya lo están.
pca_metabolic
colnames(sub_df_mod_cuan)
colnames(sub_df_mod_cuan)
pca_metabolic <- sub_df_mod_cuan %>%
prcomp(., center = TRUE, scale = FALSE) # Evitando el escalado, ya que los datos ya lo están.
summary(pca_mtcars)
colnames(sub_df_mod_cuan)
pca_metabolic <- sub_df_mod_cuan %>%
prcomp(., center = TRUE, scale = FALSE) # Evitando el escalado, ya que los datos ya lo están.
summary(pca_metabolic)
pca_metabolic_summary <- summary(pca_metabolic)
View(pca_metabolic_summary)
pca_metabolic_summary[["x"]]
pca_metabolic_summary[["importance"]]
pca_final <- principal(pca_metabolic, nfactors = 2, rotate = "none") %>%
inner_join(., df_procesada$metabolico)
df_procesada
sub_df_mod_cuan
inner_join(df_procesada, sub_df_mod_cuan, by = index)
inner_join(df_procesada, sub_df_mod_cuan, by = "index")
inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index")
modified_df <- inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index")
pca_final <- principal(modified_df, nfactors = 2, rotate = "none")
inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index")
modified_df <- inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index") %>%
select(-index)
modified_df <- inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index") %>%
select(-index)
inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index") %>%
select(-index)
modified_df <- inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index") %>%
select(-index)
pca_final <- principal(modified_df, nfactors = 2, rotate = "none")
modified_df <- inner_join(subset(df_procesada, select = c("metabolico", "index")), sub_df_mod_cuan, by = "index") %>%
select(-index)
pca_final <- principal(modified_df, nfactors = 2, rotate = "none")
str(modified_df)
principal(sub_df_mod_cuan, nfactors = 2, rotate = "none")
pca_final <- principal(sub_df_mod_cuan, nfactors = 2, rotate = "none")
ggbiplot(pca_final, ellipse = TRUE, labels = rownames(pca_final), groups = df_procesada$metabolico)
library(ggbiplot)
pca_final <- principal(sub_df_mod_cuan, nfactors = 2, rotate = "none")
ggbiplot(pca_final, ellipse = TRUE, labels = rownames(pca_final), groups = df_procesada$metabolico)
pca_final <- principal(sub_df_mod_cuan, nfactors = 2, rotate = "none")
ggbiplot(pca_final, ellipse = TRUE, labels = rownames(pca_final), groups = df_procesada$metabolico)
sub_df_mod_cuan
View(sub_df_mod_cuan)
pca_final <- principal(sub_df_mod_cuan %>% select(-index), nfactors = 2, rotate = "none")
principal(sub_df_mod_cuan %>% select(-index), nfactors = 2, rotate = "none")
pca_final <- principal(sub_df_mod_cuan %>% select(-index), nfactors = 2, rotate = "none")
ggbiplot(pca_final, ellipse = TRUE, labels = rownames(pca_final), groups = df_procesada$metabolico)
View(pca_metabolic)
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico)
View(pca_metabolic)
pca_metabolic
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "metabolico")
df_procesada$metabolico <- ifelse(df_procesada$metabolico == 0, "Sin Sindrome", "Con Sindrome")
ifelse(df_procesada$metabolico == 0, "Sin Sindrome", "Con Sindrome")
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "metabolico")
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico)
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico")
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico") +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
theme_minimal(base_size = 14)
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico") +
theme_minimal(base_size = 14) +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
theme(plot.margin = margin(2, 2, 2, 2, "cm"))
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
theme(plot.margin = margin(5, 5, 5, 5, "cm"))
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
ggbiplot(pca_metabolic, ellipse = TRUE, labels = rownames(pca_metabolic), groups = df_procesada$metabolico) +
labs(fill = "Metabolico", color = "Metabolico") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
coord_flip()
